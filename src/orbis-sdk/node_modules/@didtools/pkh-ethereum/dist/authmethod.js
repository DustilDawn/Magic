import { Cacao, SiweMessage } from '@didtools/cacao';
import { randomString } from '@stablelib/random';
import { AccountId } from 'caip';
import { safeSend } from './utils.js';
export const VERSION = '1';
export const CHAIN_NAMESPACE = 'eip155';
export var EthereumWebAuth;
(function(EthereumWebAuth) {
    async function getAuthMethod(ethProvider, account) {
        if (typeof window == 'undefined') throw new Error('Web Auth method requires browser environment');
        const domain = window.location.hostname;
        return async (opts)=>{
            opts.domain = domain;
            return createCACAO(opts, ethProvider, account);
        };
    }
    EthereumWebAuth.getAuthMethod = getAuthMethod;
})(EthereumWebAuth || (EthereumWebAuth = {}));
export var EthereumNodeAuth;
(function(EthereumNodeAuth) {
    async function getAuthMethod(ethProvider, account, appName) {
        const domain = appName;
        return async (opts)=>{
            opts.domain = domain;
            return createCACAO(opts, ethProvider, account);
        };
    }
    EthereumNodeAuth.getAuthMethod = getAuthMethod;
})(EthereumNodeAuth || (EthereumNodeAuth = {}));
async function createCACAO(opts, ethProvider, account) {
    const now = new Date();
    const oneDayLater = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    const siweMessage = new SiweMessage({
        domain: opts.domain,
        address: account.address,
        statement: opts.statement ?? 'Give this application access to some of your data on Ceramic',
        uri: opts.uri,
        version: VERSION,
        nonce: opts.nonce ?? randomString(10),
        issuedAt: now.toISOString(),
        expirationTime: opts.expirationTime ?? oneDayLater.toISOString(),
        chainId: account.chainId.reference,
        resources: opts.resources
    });
    const signature = await safeSend(ethProvider, 'personal_sign', [
        siweMessage.signMessage(),
        account.address, 
    ]);
    siweMessage.signature = signature;
    return Cacao.fromSiweMessage(siweMessage);
}
async function requestChainId(provider) {
    const chainIdHex = await safeSend(provider, 'eth_chainId', []);
    return parseInt(chainIdHex, 16);
}
export async function getAccountId(ethProvider, address) {
    const ethChainId = await requestChainId(ethProvider);
    const chainId = `${CHAIN_NAMESPACE}:${ethChainId}`;
    return new AccountId({
        address,
        chainId
    });
}
