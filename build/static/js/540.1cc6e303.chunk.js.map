{"version":3,"file":"static/js/540.1cc6e303.chunk.js","mappings":"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","sources":["../node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/_version.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/index.js","../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts"],"sourcesContent":["\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"properties/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nexport function getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nexport function resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nexport function checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nexport function shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nexport function deepCopy(object) {\n    return _deepCopy(object);\n}\nexport class Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = { ...this.connection };\n    batcherConnection.headers!['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n"],"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_checkNormalize","HEX","Logger","version","Object","defineProperty","this","enumerable","value","writable","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn","logger","defineReadOnly","object","opaque","bigint","boolean","number","string","_isFrozen","undefined","Array","isArray","isFrozen","_deepCopy","freeze","map","item","deepCopy","result","RequestBatcher","sendBatchFn","maxBatchSize","request","inflightRequest","resolve","reject","promise","Promise","pendingBatch","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","inflight","then","index","payload","data","AlchemyProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","throttleLimit","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","headers","batcher","requests","fetchJson","_super","detectNetwork","logWarn","DEFAULT_ALCHEMY_API_KEY","method","_send","methodName","forceBatch","id","_nextId","jsonrpc","enqueueRequest","emit","action","provider","cache","indexOf","_cache","getResult","response","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","values","Network","includes","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","JsonRpcProvider"],"sourceRoot":""}