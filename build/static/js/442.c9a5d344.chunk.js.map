{"version":3,"file":"static/js/442.c9a5d344.chunk.js","mappings":"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","sources":["../node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","../node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","../node_modules/sturdy-websocket/src/index.ts"],"sourcesContent":["import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n"],"names":["WebsocketBackfiller","provider","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","this","getBlockNumber","toBlockNumber","length","getHeadEventsInRange","Math","max","maxBackfillBlocks","lastSeenBlockNumber","fromHex","number","minBlockNumber","getReorgHeads","reorgHeads","intermediateHeads","filter","previousLogs","getLogsInRange","blockNumber","getCommonAncestor","commonAncestor","removedLogs","log","map","Object","removed","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","newMax","send","blockNumberHex","toBlockExclusive","batchParts","i","push","method","params","toHex","sendBatch","blockHeads","toNewHeadsEvent","result","oldEvent","getBlockByNumber","blockHead","hash","reverse","oldLog","blockHash","rangeFilter","fromBlock","toBlock","head","totalDifficulty","transactions","uncles","dedupeNewHeads","events","dedupe","event","dedupeLogs","items","getKey","keysSeen","Set","forEach","item","key","has","add","CANCELLED","Error","AlchemyWebSocketProvider","config","wsConstructor","apiKey","AlchemyProvider","alchemyNetwork","network","connection","protocol","VERSION","ws","SturdyWebSocket","url","process","versions","node","require","WebSocket","ethersNetwork","EthersNetwork","_events","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","message","JSON","parse","data","Array","isArray","jsonrpc","undefined","id","isResponse","isSubscriptionEvent","physicalId","subscription","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","handleReopen","clear","cancelled","cancel","makeCancelToken","cancelBackfill","values","__awaiter","resubscribeAndBackfill","console","error","startHeartbeat","stopHeartbeatAndBackfill","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","eventName","listener","_addEventListener","isAlchemyEvent","_off","_removeAllListeners","_listenerCount","_listeners","once","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","_startEvent","ALCHEMY_EVENT_TYPES","includes","type","customStartEvent","tag","param","processFunc","subIdPromise","_subIds","startingBlockNumber","Promise","all","then","subId","resolvedParams","set","sentEvents","_subs","args","stopped","eventTag","setTimeout","apply","_stopEvent","parts","nextId","payload","sendBatchConcurrently","removeSocketListeners","DEFAULT_ALCHEMY_API_KEY","e","listenerCount","_websocket","addEventListener","removeEventListener","withBackoffRetries","withTimeout","getNewHeadsBackfill","backfillEvents","emitNewHeadsEvent","getLogsBackfill","emitLogsEvent","emitGenericEvent","emitProcessFn","emitFunction","setInterval","reconnect","req","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","fromAddress","toAddress","hashesOnly","_subscribe","AlchemySubscription","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","addresses","includeRemoved","_getFilter","emit","BigNumber","toNumber","_emitted","block","formatter","filterLog","removeAllListeners","found","CustomNetworks","getNetworkFromEthers","WebSocketProvider","f","retryCount","shouldRetry","nextWaitTime","delay","min","ms","resolve","promise","race","_","reject","currentBlockNumber","firstGoodIndex","findIndex","splice","protocolsOrOptions","options","onclose","onerror","onmessage","onopen","ondown","onreopen","CONNECTING","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","listeners","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","code","reason","disposeSocket","shutdown","readyState","handleClose","dispatchEventOfType","l","connectTimeout","handleError","handleOpen","connectTimeoutId","_this","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","close","clearTimeout","slice","callListener","defaultPrevented","call","handleEvent","debug","s","POSITIVE_INFINITY","keys","DEFAULT_OPTIONS","value"],"sourceRoot":""}